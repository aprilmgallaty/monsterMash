<?php 
 
/** 
 * @file 
 * Extends the UI to allow for social networking functions
 */ 
 
/* 
 * Implementation of hook_node_view(). 
 */ 
function monster_node_view($node, $view_mode) {
	global $user;
	$account = $user;
	
	$likes = 0;
	if (isset($node->monster_likes)) {
		$likes = count($node->monster_likes);
	}
		
	$hates = 0;
	if (isset($node->monster_hates)) {
		$hates = count($node->monster_hates);
	}

	$node->content['monster_likes'] = array(
		'#markup' => theme('monster_likes', array(
			'likes' => $likes,
			'hates' => $hates)
			),
		'#weight' => -1
		);
	
	if (!$account->uid) {
		return;
	}
	
	$liked = false;
	$hated = false;
	if (isset($node->monster_likes) && in_array($account->uid, $node->monster_likes)) {
		$liked = true;
	}
	if (isset($node->monster_hates) && in_array($account->uid, $node->monster_hates)) {
		$hated = true;
	}

	if ($node->type == 'status_update') {
		if ($liked) {
			$like_title = 'Unlike';
			$like_href = "node/$node->nid/unlike";
			$like_link_title = 'Unlike this status';			
		} else {
			$like_title = 'Like';
			$like_href = "node/$node->nid/like";
			$like_link_title = 'Like this status';
		}
		
		if ($hated) {
			$hate_title = 'Unhate';
			$hate_href = "node/$node->nid/unhate";
			$hate_link_title = 'Unhate this status';			
		} else {
			$hate_title = 'Hate';
			$hate_href = "node/$node->nid/hate";
			$hate_link_title = 'Hate this status';
		}
		
		if (!$hated) {
			$node->content['links']['like'] = array(
				'#theme' => 'links__node__like',
				'#links' => array(
					'like' => array(
						'title' => $like_title,
						'href' => $like_href,
						'attributes' => array(
							'title' => $like_link_title
						)
					)
				),
				'#attributes' => array(
					'class' => array(
						'links',
						'inline'
					)
				)
			);
		}

		if (!$liked) {
			$node->content['links']['hate'] = array(
				'#theme' => 'links__node__hate',
				'#links' => array(
					'hate' => array(
						'title' => $hate_title,
						'href' => $hate_href,
						'attributes' => array(
							'title' => $hate_link_title
						)
					)
				),
				'#attributes' => array(
					'class' => array(
						'links',
						'inline'
					)
				)
			);
		}
	}
}

/*
 * Implementation of hook_theme().
 */
function monster_theme() {
	return array(
		'monster_likes' => array(
			'variables' => array(
				'likes' => NULL,
				'hates' => NULL),
		),
	);
}

/*
 * Custom theme
 */
function theme_monster_likes($variables) {
  $output = '<div class="monster_likes_and_hates">';
  $output .= '<div class="monster_likes">';
  $output .= '<div class="monster_likes_label">Likes: </div>';
  $output .= $variables['likes'];
  $output .= '</div>';
  $output .= '<div class="monster_hates">';
  $output .= '<div class="monster_hates_label">Hates: </div>';
  $output .= $variables['hates'];
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

/* 
 * Implementation of hook_menu(). 
 */ 
function monster_menu() {
	$items['node/%node/like'] = array( 
		'title' => 'Like', 
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'like'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	$items['node/%node/unlike'] = array( 
		'title' => 'Unlike', 
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'unlike'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	$items['node/%node/hate'] = array( 
		'title' => 'Hate', 
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'hate'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	$items['node/%node/unhate'] = array( 
		'title' => 'Unhate', 
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'unhate'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	
	return $items;
}

/* 
 * Page callback. 
 */ 
function monster_node_like($node, $action) {
	global $user;
	$account = $user;

	if ($action == 'like') {
		db_insert('monster_likes')
			->fields(array(
				'nid' => $node->nid,
				'uid' => $account->uid
			))
			->execute();
	} else if ($action == 'unlike') {
		$and = db_and()
			->condition('nid', $node->nid)
			->condition('uid', $account->uid);
			
		db_delete('monster_likes')
			->condition($and)
			->execute();
	} else if ($action == 'hate') {
		db_insert('monster_hates')
			->fields(array(
				'nid' => $node->nid,
				'uid' => $account->uid
			))
			->execute();
	} else if ($action == 'unhate') {
		$and = db_and()
			->condition('nid', $node->nid)
			->condition('uid', $account->uid);
			
		db_delete('monster_hates')
			->condition($and)
			->execute();
	}
	
	drupal_goto("node/$node->nid");
} 

/* 
 * Implementation of hook_permission(). 
 */ 
function monster_permission() {
	return array(
		'like user status' => array(
			'title' => 'Like/hate user status',
			'description' => 'Allow user to like or hate a status'
		)
	);
}

/*
 * Implementation of hook_node_delete().
 */
function monster_node_delete($node) {
	db_delete('monster_likes')
		->condition('nid', $node->nid)
		->execute();
	db_delete('monster_hates')
		->condition('nid', $node->nid)
		->execute();
}

/*
 * Implementation of hook_node_load().
 */
function monster_node_load($nodes, $types) {
	$is_status_update = false;
	foreach ($types as $type) {
		if ($type == 'status_update') {
			$is_status_update = true;
		}
	}
	
	if (!$is_status_update) {
		return;
	}
	
	foreach ($nodes as $node) {
		if ($node->type == 'status_update') {
			$result = db_select('monster_likes', 'm')
				->fields('m', array('uid'))
				->where('m.nid = :nid', array(':nid' => $node->nid))
				->execute();
			foreach ($result as $record) {
				$node->monster_likes[] = $record->uid;
			}

			$result = db_select('monster_hates', 'm')
				->fields('m', array('uid'))
				->where('m.nid = :nid', array(':nid' => $node->nid))
				->execute();
			foreach ($result as $record) {
				$node->monster_hates[] = $record->uid;
			}
		}
	}	
}

/**
 * Implements hook_block_info().
 */
function monster_block_info() {
	$blocks = array();
	$blocks['monster_user'] = array(
		'info' => t('Monster User'),
	);

	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function monster_block_view($delta='') {
	$block = array();

	switch($delta) {
	case 'monster_user' :
		$block['content'] = monster_user_contents();
		break;
	}

	return $block;
}
 
/**
 * Custom function to assemble renderable array for block content.
 * Returns a renderable array with the block content.
 * @return
 *   returns a renderable array of block content.
 */
function monster_user_contents() {
	global $user;
	$account = user_load($user->uid);
	$image = theme('user_picture', array('account' => $account));

	// Block output
	$block = array(
		'pre' => array(
			'#type' => 'markup',
			'#markup' => '<p>This is the beginning of the block</p>',
		),
		'image' => array(
			'#type' => 'markup',
			'#markup' => $image,
		),
		'post' => array(
			'#type' => 'markup',
			'#markup' => '<p>This is the end of the block</p>',
		),
	);

	return $block;
}
