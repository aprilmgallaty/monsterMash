<?php 
 
/** 
 * @file 
 * Extends drupal to allow for social networking functions
 */ 
 
/* 
 * Implementation of hook_node_view(). 
 */ 
function monster_node_view($node, $view_mode) {
	global $user;

	if ($node->type != 'status_update') {
		return;
	}
	
	$account = $user;
	$author = user_load($node->uid);

	$node->content['status_author'] = theme('username', array('account' => $author));
	
	$likes = 0;
	if (isset($node->monster_likes)) {
		$likes = count($node->monster_likes);
	}
		
	$hates = 0;
	if (isset($node->monster_hates)) {
		$hates = count($node->monster_hates);
	}

	if (!$account->uid) {
		$node->content['monster_likes'] = array(
			'#markup' => theme('monster_likes', array(
				'likes' => $likes,
				'hates' => $hates,
				'like_title' => NULL,
				'like_href' => NULL,
				'like_link_title' => NULL,
				'hate_title' => NULL,
				'hate_href' => NULL,
				'hate_link_title' => NULL
				)
			),
			'#weight' => -1
		);
			
		return;
	}
	
	$liked = false;
	$hated = false;
	if (isset($node->monster_likes) && in_array($account->uid, $node->monster_likes)) {
		$liked = true;
	}
	if (isset($node->monster_hates) && in_array($account->uid, $node->monster_hates)) {
		$hated = true;
	}

	if ($hated) {
		$like_title = NULL;
		$like_href = NULL;
		$like_link_title = NULL;			
	} elseif ($liked) {
		$like_title = 'Unlike';
		$like_href = "node/$node->nid/unlike";
		$like_link_title = 'Unlike this status';			
	} else {
		$like_title = 'Like';
		$like_href = "node/$node->nid/like";
		$like_link_title = 'Like this status';
	}
	
	if ($liked) {
		$hate_title = NULL;
		$hate_href = NULL;
		$hate_link_title = NULL;			
	} elseif ($hated) {
		$hate_title = 'Unhate';
		$hate_href = "node/$node->nid/unhate";
		$hate_link_title = 'Unhate this status';			
	} else {
		$hate_title = 'Hate';
		$hate_href = "node/$node->nid/hate";
		$hate_link_title = 'Hate this status';
	}

	$node->content['monster_likes'] = array(
		'#markup' => theme('monster_likes', array(
			'likes' => $likes,
			'hates' => $hates,
			'like_title' => $like_title,
			'like_href' => $like_href,
			'like_link_title' => $like_link_title,
			'hate_title' => $hate_title,
			'hate_href' => $hate_href,
			'hate_link_title' => $hate_link_title
			)
		),
		'#weight' => -1
	);
}

/*
 * Implementation of hook_theme().
 */
function monster_theme() {
	return array(
		'monster_likes' => array(
			'variables' => array(
				'likes' => NULL,
				'hates' => NULL,
				'like_title' => NULL,
				'like_href' => NULL,
				'like_link_title' => NULL,
				'hate_title' => NULL,
				'hate_href' => NULL,
				'hate_link_title' => NULL,
			),
		),
	);
}

/*
 * Custom theme
 */
function theme_monster_likes($variables) {
	$output = '<div class="monster_likes_and_hates">';
	$output .= '<div class="monsterLikes">';
	if (isset($variables['like_href'])) {
		$output .= '<a href="' . base_path() . $variables['like_href'] . '" title="' . $variables['like_link_title'] . '" >';
	}
	$output .= '<img src="' . base_path() . drupal_get_path('theme', $GLOBALS['theme']) . '/img/thumbsUp100x128.png" width=30 height=38 />';
	if (isset($variables['like_href'])) {
		$output .= '</a>';
	}
	$output .= '<span class="numberStyle">';
	$output .= $variables['likes'];
	$output .= '</span>';
	$output .= '</div>';
	$output .= '<div class="monsterHates">';
	if (isset($variables['hate_href'])) {
		$output .= '<a href="' . base_path() . $variables['hate_href'] . '" title="' . $variables['hate_link_title'] . '" >';
	}
	$output .= '<img src="' . base_path() . drupal_get_path('theme', $GLOBALS['theme']) . '/img/thumbsDown100x128.png" width=30 height=38 />';
	if (isset($variables['hate_href'])) {
		$output .= '</a>';
	}
	$output .= '<span class="numberStyle">';
	$output .= $variables['hates'];
	$output .= '</span>';
	$output .= '</div>';
	$output .= '</div>';
	return $output;
}

/*
 * Theme the username
 */
function monster_username($variables) {
	if (isset($variables['link_path'])) {
		// We have a link path, so we should generate a link using l().
		// Additional classes may be added as array elements like
		// $variables['link_options']['attributes']['class'][] = 'myclass';
		$output = l($variables['name'] . $variables['extra'], $variables['link_path'], $variables['link_options']);
	} else {
		// Modules may have added important attributes so they must be included
		// in the output. Additional classes may be added as array elements like
		// $variables['attributes_array']['class'][] = 'myclass';
		$output = '<span' . drupal_attributes($variables['attributes_array']) . '><i class="icon-user"></i> ' . $variables['name'] . $variables['extra'] . '</span>';
	}
	return $output;
}

/* 
 * Implementation of hook_menu(). 
 */ 
function monster_menu() {
	
	/* Hook like/unlike/hate/unhate links */
	
	$items['node/%node/like'] = array( 
		'title' => 'Like', 
		'type' => MENU_LOCAL_ACTION,
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'like'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	$items['node/%node/unlike'] = array( 
		'title' => 'Unlike', 
		'type' => MENU_LOCAL_ACTION,
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'unlike'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	$items['node/%node/hate'] = array( 
		'title' => 'Hate', 
		'type' => MENU_LOCAL_ACTION,
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'hate'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	$items['node/%node/unhate'] = array( 
		'title' => 'Unhate', 
		'type' => MENU_LOCAL_ACTION,
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'unhate'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	$items['node/%node/unhate'] = array( 
		'title' => 'Unhate', 
		'type' => MENU_LOCAL_ACTION,
		'page callback' => 'monster_node_like',
		'page arguments' => array(1, 'unhate'),
		'access callback' => 'user_access', 
		'access arguments' => array('like user status')
	); 
	
	return $items;
}

/* 
 * Page callback for like/unlike/hate/unhate. 
 */ 
function monster_node_like($node, $action) {
	global $user;
	$account = $user;

	if ($action == 'like') {
		db_insert('monster_likes')
			->fields(array(
				'nid' => $node->nid,
				'uid' => $account->uid
			))
			->execute();
	} else if ($action == 'unlike') {
		$and = db_and()
			->condition('nid', $node->nid)
			->condition('uid', $account->uid);
			
		db_delete('monster_likes')
			->condition($and)
			->execute();
	} else if ($action == 'hate') {
		db_insert('monster_hates')
			->fields(array(
				'nid' => $node->nid,
				'uid' => $account->uid
			))
			->execute();
	} else if ($action == 'unhate') {
		$and = db_and()
			->condition('nid', $node->nid)
			->condition('uid', $account->uid);
			
		db_delete('monster_hates')
			->condition($and)
			->execute();
	}
	
	drupal_goto('node/' .  $node->nid);
} 

/* 
 * Implementation of hook_permission(). 
 */ 
function monster_permission() {
	return array(
		'like user status' => array(
			'title' => 'Like/hate user status',
			'description' => 'Allow user to like or hate a status'
		),
	);
}

/*
 * Implementation of hook_node_delete().
 */
function monster_node_delete($node) {
	db_delete('monster_likes')
		->condition('nid', $node->nid)
		->execute();
	db_delete('monster_hates')
		->condition('nid', $node->nid)
		->execute();
}

/*
 * Implementation of hook_node_load().
 */
function monster_node_load($nodes, $types) {
	global $user;
	$is_status_update = false;
	foreach ($types as $type) {
		if ($type == 'status_update') {
			$is_status_update = true;
		}
	}
	
	if (!$is_status_update) {
		return;
	}
	
	$account = $user;
	foreach ($nodes as $node) {
		if ($node->type == 'status_update') {
			$result = db_select('monster_likes', 'm')
				->fields('m', array('uid'))
				->where('m.nid = :nid', array(':nid' => $node->nid))
				->execute();
			foreach ($result as $record) {
				$node->monster_likes[] = $record->uid;
			}

			$result = db_select('monster_hates', 'm')
				->fields('m', array('uid'))
				->where('m.nid = :nid', array(':nid' => $node->nid))
				->execute();
			foreach ($result as $record) {
				$node->monster_hates[] = $record->uid;
			}
		}
	}	
}

/**
 * Implements hook_block_info().
 */
function monster_block_info() {
	$blocks = array();
	$blocks['monster_user'] = array(
		'info' => t('Monster User'),
	);

	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function monster_block_view($delta='') {
	$block = array();

	switch($delta) {
	case 'monster_user' :
		$block['content'] = monster_user_contents();
		break;
	}

	return $block;
}
 
/**
 * Custom function to assemble renderable array for block content.
 * Returns a renderable array with the block content.
 * @return
 *   returns a renderable array of block content.
 */
function monster_user_contents() {
	global $user;
	$account = user_load($user->uid);
	$image = theme('user_picture', array('account' => $account));
	$username = theme('username', array('account' => $account));

	$view_profile_href = base_path() . 'users/' . $user->name;
	$edit_profile_href = base_path() . 'user/' . $user->uid . '/edit';
	$edit_profile_img = base_path() . path_to_theme() . '/img/settings25x25.png';

	$about = field_get_items('user', $account, 'field_about_me');
	if (!$about) {
		$about = array(
			array('safe_value' => '')
		);
	}
	
	$about_summary = text_summary($about[0]['safe_value'], NULL, 80);
	
	// Block output
	$block = array(
		'avatar' => array(
			'#type' => 'markup',
			'#markup' => '<div class="avatarHolder"><div class="avatar">' . $image . '</div></div>',
		),
		'info-start' => array(
			'#type' => 'markup',
			'#markup' => '<div class="information">',
		),
		'user-name' => array(
			'#type' => 'markup',
			'#markup' => '<h4>' . $username . '</h4>',
		),
		'about' => array(
			'#type' => 'markup',
			'#markup' => '<h5 class="special">About</h5>',
		),
		'about-info' => array(
			'#type' => 'markup',
			'#markup' => '<p>' . $about_summary . '</p><p class="readMore"><a href="' . $view_profile_href . '">read more &rArr;</a></p><div class="clear"></div>',
		),
		'settings' => array(
			'#type' => 'markup',
			'#markup' => '<div class="settings"><a href="' . $edit_profile_href . '"><img src="' . $edit_profile_img . '" width=25 height=25 alt="Settings" /></a></div>',
		),
		'info-end' => array(
			'#type' => 'markup',
			'#markup' => '</div><div class="clear"></div>',
		),
		'update-status' => array(
			'#type' => 'markup',
			'#markup' => '<div class="update-status">',
		),
		'update-status-title' => array(
			'#type' => 'markup',
			'#markup' => '<h3 id="updateStatusTitle">What\'s going on?</h3>',
		),
		'update-status-form' => drupal_get_form('monster_update_status_form'),
		'update-status-end' => array(
			'#type' => 'markup',
			'#markup' => '</div>',
		),
	);

	return $block;
}

function monster_update_status_form($form, &$form_state) {

	$form['status_title'] = array(
		'#type' => 'textfield',
		'#title' => 'Subject (optional)'
	);
	
	// Make this field required.
	$form['status'] = array(
		'#type' => 'textarea',
		'#title' => 'Message',
		'#required' => TRUE,
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Update',
	);

	return $form;
}

function monster_update_status_form_submit($form, &$form_state) {
	global $user;

	// Copied from the example at https://drupal.org/node/1388922
	
	$values = array(
		'type' => 'status_update',
		'uid' => $user->uid,
		'status' => 1,
		'comment' => 2,
		'promote' => 1,
	);
	$entity = entity_create('node', $values);
	$ewrapper = entity_metadata_wrapper('node', $entity);
	$ewrapper->title->set($form_state['values']['status_title']);
	$ewrapper->body->set(array('value' => $form_state['values']['status']));

	$my_date = new DateTime('now');
	$entity->field_my_date[LANGUAGE_NONE][0] = array(
	   'value' => date_format($my_date, 'Y-m-d'),
	   'timezone' => 'UTC',
	   'timezone_db' => 'UTC',
	 );

	$ewrapper->save(true);
	entity_save('node', $entity);
}

